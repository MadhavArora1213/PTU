const crypto = require('crypto');
const db = require('../config/database');
const SibApiV3Sdk = require('sib-api-v3-sdk');

// Initialize Brevo (Sendinblue)
let emailServiceReady = false;
let brevoApiInstance;

try {
  if (process.env.BREVO_API_KEY) {
    SibApiV3Sdk.ApiClient.instance.authentications['api-key'].apiKey = process.env.BREVO_API_KEY;
    brevoApiInstance = new SibApiV3Sdk.TransactionalEmailsApi();
    emailServiceReady = true;
    console.log('Brevo email service initialized successfully');
  } else {
    console.log('Brevo API key not configured - running in development mode');
  }
} catch (error) {
  console.log('Brevo initialization failed:', error.message);
}

// Generate OTP
const generateOTP = () => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

// Store OTP in database
const storeOTP = async (email, otp) => {
  try {
    // Delete any existing OTP for this email
    await db.query('DELETE FROM otp_verifications WHERE email = $1', [email]);
    
    // Store new OTP
    const expiresAt = new Date(Date.now() + parseInt(process.env.OTP_EXPIRY_MINUTES || 10) * 60 * 1000);
    await db.query(
      'INSERT INTO otp_verifications (email, otp_code, expires_at) VALUES ($1, $2, $3)',
      [email, otp, expiresAt]
    );
    
    return true;
  } catch (error) {
    console.error('Error storing OTP:', error);
    return false;
  }
};

// Verify OTP
const verifyOTP = async (email, otp) => {
  try {
    const result = await db.query(
      'SELECT * FROM otp_verifications WHERE email = $1 AND otp_code = $2 AND expires_at > NOW() AND is_verified = FALSE',
      [email, otp]
    );
    
    if (result.rows.length === 0) {
      // Check if OTP exists but is expired or already used
      const expiredResult = await db.query(
        'SELECT * FROM otp_verifications WHERE email = $1 AND otp_code = $2',
        [email, otp]
      );
      
      if (expiredResult.rows.length > 0) {
        return { success: false, message: 'OTP has expired or already been used' };
      }
      
      // Increment failed attempts
      await db.query(
        'UPDATE otp_verifications SET attempts = attempts + 1 WHERE email = $1',
        [email]
      );
      
      return { success: false, message: 'Invalid OTP' };
    }
    
    // Mark OTP as verified
    await db.query(
      'UPDATE otp_verifications SET is_verified = TRUE WHERE email = $1 AND otp_code = $2',
      [email, otp]
    );
    
    return { success: true, message: 'OTP verified successfully' };
  } catch (error) {
    console.error('Error verifying OTP:', error);
    return { success: false, message: 'Error verifying OTP' };
  }
};

// Send OTP email
const sendOTPEmail = async (email, otp, language = 'en') => {
  try {
    // Email templates in different languages
    const templates = {
      en: {
        subject: 'ArthRakshak - Email Verification Code',
        htmlContent: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #2E8B57;">ArthRakshak Email Verification</h2>
            <p>Hello,</p>
            <p>Thank you for registering with ArthRakshak. Please use the following verification code to complete your registration:</p>
            <div style="background-color: #f0f0f0; padding: 20px; text-align: center; margin: 20px 0;">
              <h1 style="color: #2E8B57; font-size: 32px; margin: 0;">${otp}</h1>
            </div>
            <p>This code will expire in ${process.env.OTP_EXPIRY_MINUTES || 10} minutes.</p>
            <p>If you didn't request this verification, please ignore this email.</p>
            <p>Best regards,<br>ArthRakshak Team</p>
          </div>
        `
      },
      hi: {
        subject: 'ArthRakshak - рдИрдореЗрд▓ рд╕рддреНрдпрд╛рдкрди рдХреЛрдб',
        htmlContent: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #2E8B57;">ArthRakshak рдИрдореЗрд▓ рд╕рддреНрдпрд╛рдкрди</h2>
            <p>рдирдорд╕реНрддреЗ,</p>
            <p>ArthRakshak рдХреЗ рд╕рд╛рде рдкрдВрдЬреАрдХрд░рдг рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдкрдВрдЬреАрдХрд░рдг рдкреВрд░рд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╕рддреНрдпрд╛рдкрди рдХреЛрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ:</p>
            <div style="background-color: #f0f0f0; padding: 20px; text-align: center; margin: 20px 0;">
              <h1 style="color: #2E8B57; font-size: 32px; margin: 0;">${otp}</h1>
            </div>
            <p>рдпрд╣ рдХреЛрдб ${process.env.OTP_EXPIRY_MINUTES || 10} рдорд┐рдирдЯ рдореЗрдВ рд╕рдорд╛рдкреНрдд рд╣реЛ рдЬрд╛рдПрдЧрд╛ред</p>
            <p>рдпрджрд┐ рдЖрдкрдиреЗ рдЗрд╕ рд╕рддреНрдпрд╛рдкрди рдХрд╛ рдЕрдиреБрд░реЛрдз рдирд╣реАрдВ рдХрд┐рдпрд╛ рд╣реИ, рддреЛ рдХреГрдкрдпрд╛ рдЗрд╕ рдИрдореЗрд▓ рдХреЛ рдЕрдирджреЗрдЦрд╛ рдХрд░реЗрдВред</p>
            <p>рд╕рд╛рджрд░,<br>ArthRakshak рдЯреАрдо</p>
          </div>
        `
      }
    };

    const template = templates[language] || templates.en;
    
    if (!emailServiceReady) {
      // Development mode - just log the OTP
      console.log(`\n=== DEVELOPMENT MODE - EMAIL SERVICE ===`);
      console.log(`OTP for ${email}: ${otp}`);
      console.log(`Subject: ${template.subject}`);
      console.log(`Note: Brevo not configured. OTP logged to console.`);
      console.log(`=======================================\n`);
      
      return { success: true, messageId: 'dev-mode', note: 'Brevo not configured. OTP logged to console.' };
    }

    // Use Brevo to send email
    const sendSmtpEmail = {
      to: [{ email }],
      sender: { email: process.env.SENDER_EMAIL, name: 'ArthRakshak' },
      subject: template.subject,
      htmlContent: template.htmlContent
    };
    const result = await brevoApiInstance.sendTransacEmail(sendSmtpEmail);
    console.log('OTP email sent successfully via Brevo:', result.messageId);
    return { success: true, messageId: result.messageId };

  } catch (error) {
    console.error('Error sending OTP email:', error);
    
    // For development/testing, just log the OTP and continue
    console.log(`\n=== DEVELOPMENT MODE - EMAIL FAILED ===`);
    console.log(`OTP for ${email}: ${otp}`);
    console.log(`Please use this OTP to continue registration`);
    console.log(`=======================================\n`);
    
    // Return success so the registration flow continues
    return { success: true, messageId: 'dev-mode', otp: otp };
  }
};

// Send welcome/registration success email
const sendWelcomeEmail = async (email, name, language = 'en') => {
  try {
    // Email templates in different languages
    const templates = {
      en: {
        subject: 'Welcome to ArthRakshak - Registration Successful!',
        htmlContent: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background-color: #f9f9f9; padding: 20px;">
            <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
              <div style="text-align: center; margin-bottom: 30px;">
                <h1 style="color: #2E8B57; margin: 0; font-size: 28px;">ЁЯОЙ Welcome to ArthRakshak!</h1>
              </div>
              
              <p style="font-size: 16px; color: #333; margin-bottom: 20px;">Dear ${name},</p>
              
              <p style="font-size: 16px; color: #333; line-height: 1.6; margin-bottom: 20px;">
                Congratulations! Your registration with ArthRakshak has been completed successfully. We're excited to have you join our community of financially empowered individuals.
              </p>
              
              <div style="background-color: #f0f8f0; padding: 20px; border-radius: 8px; margin: 25px 0; border-left: 4px solid #2E8B57;">
                <h3 style="color: #2E8B57; margin: 0 0 15px 0; font-size: 18px;">ЁЯЪА What's Next?</h3>
                <ul style="color: #333; margin: 0; padding-left: 20px; line-height: 1.8;">
                  <li>Complete your profile to get personalized financial recommendations</li>
                  <li>Explore our financial calculators (EMI, SIP, and more)</li>
                  <li>Take financial literacy quizzes to earn points</li>
                  <li>Chat with our AI financial assistant</li>
                  <li>Set up your financial goals and track progress</li>
                </ul>
              </div>
              
              <div style="background-color: #e8f4fd; padding: 20px; border-radius: 8px; margin: 25px 0; border-left: 4px solid #007bff;">
                <h3 style="color: #007bff; margin: 0 0 15px 0; font-size: 18px;">ЁЯТб Pro Tips</h3>
                <ul style="color: #333; margin: 0; padding-left: 20px; line-height: 1.8;">
                  <li>Enable notifications to stay updated on financial tips</li>
                  <li>Regularly check the fraud alerts section</li>
                  <li>Use our voice assistant for quick financial queries</li>
                  <li>Connect with our financial therapist for personalized guidance</li>
                </ul>
              </div>
              
              <div style="text-align: center; margin: 30px 0;">
                <div style="background-color: #2E8B57; color: white; padding: 15px 30px; border-radius: 25px; display: inline-block; font-weight: bold; font-size: 16px;">
                  ЁЯОп Start Your Financial Journey Today!
                </div>
              </div>
              
              <p style="font-size: 14px; color: #666; line-height: 1.6; margin-top: 30px; border-top: 1px solid #eee; padding-top: 20px;">
                If you have any questions or need assistance, feel free to reach out to our support team. We're here to help you achieve your financial goals!
              </p>
              
              <p style="font-size: 16px; color: #333; margin-top: 25px;">
                Best regards,<br>
                <strong style="color: #2E8B57;">The ArthRakshak Team</strong><br>
                <em style="color: #666; font-size: 14px;">Your Partner in Financial Wellness</em>
              </p>
            </div>
            
            <div style="text-align: center; margin-top: 20px; color: #999; font-size: 12px;">
              <p>This email was sent to ${email}. If you didn't create an account, please ignore this email.</p>
            </div>
          </div>
        `
      },
      hi: {
        subject: 'ArthRakshak рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ - рдкрдВрдЬреАрдХрд░рдг рд╕рдлрд▓!',
        htmlContent: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background-color: #f9f9f9; padding: 20px;">
            <div style="background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
              <div style="text-align: center; margin-bottom: 30px;">
                <h1 style="color: #2E8B57; margin: 0; font-size: 28px;">ЁЯОЙ ArthRakshak рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!</h1>
              </div>
              
              <p style="font-size: 16px; color: #333; margin-bottom: 20px;">рдкреНрд░рд┐рдп ${name},</p>
              
              <p style="font-size: 16px; color: #333; line-height: 1.6; margin-bottom: 20px;">
                рдмрдзрд╛рдИ рд╣реЛ! ArthRakshak рдХреЗ рд╕рд╛рде рдЖрдкрдХрд╛ рдкрдВрдЬреАрдХрд░рдг рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреВрд░рд╛ рд╣реЛ рдЧрдпрд╛ рд╣реИред рд╣рдореЗрдВ рдЦреБрд╢реА рд╣реИ рдХрд┐ рдЖрдк рд╡рд┐рддреНрддреАрдп рд░реВрдк рд╕реЗ рд╕рд╢рдХреНрдд рд╡реНрдпрдХреНрддрд┐рдпреЛрдВ рдХреЗ рд╣рдорд╛рд░реЗ рд╕рдореБрджрд╛рдп рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реБрдП рд╣реИрдВред
              </p>
              
              <div style="background-color: #f0f8f0; padding: 20px; border-radius: 8px; margin: 25px 0; border-left: 4px solid #2E8B57;">
                <h3 style="color: #2E8B57; margin: 0 0 15px 0; font-size: 18px;">ЁЯЪА рдЖрдЧреЗ рдХреНрдпрд╛ рдХрд░реЗрдВ?</h3>
                <ul style="color: #333; margin: 0; padding-left: 20px; line-height: 1.8;">
                  <li>рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╡рд┐рддреНрддреАрдп рд╕реБрдЭрд╛рд╡ рдкрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рдкреВрд░реА рдХрд░реЗрдВ</li>
                  <li>рд╣рдорд╛рд░реЗ рд╡рд┐рддреНрддреАрдп рдХреИрд▓рдХреБрд▓реЗрдЯрд░ (EMI, SIP, рдФрд░ рдЕрдзрд┐рдХ) рдХрд╛ рдЕрдиреНрд╡реЗрд╖рдг рдХрд░реЗрдВ</li>
                  <li>рдЕрдВрдХ рдЕрд░реНрдЬрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╡рд┐рддреНрддреАрдп рд╕рд╛рдХреНрд╖рд░рддрд╛ рдкреНрд░рд╢реНрдиреЛрддреНрддрд░реА рд▓реЗрдВ</li>
                  <li>рд╣рдорд╛рд░реЗ AI рд╡рд┐рддреНрддреАрдп рд╕рд╣рд╛рдпрдХ рд╕реЗ рдЪреИрдЯ рдХрд░реЗрдВ</li>
                  <li>рдЕрдкрдиреЗ рд╡рд┐рддреНрддреАрдп рд▓рдХреНрд╖реНрдп рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдХрд░реЗрдВ рдФрд░ рдкреНрд░рдЧрддрд┐ рдЯреНрд░реИрдХ рдХрд░реЗрдВ</li>
                </ul>
              </div>
              
              <div style="background-color: #e8f4fd; padding: 20px; border-radius: 8px; margin: 25px 0; border-left: 4px solid #007bff;">
                <h3 style="color: #007bff; margin: 0 0 15px 0; font-size: 18px;">ЁЯТб рдкреНрд░реЛ рдЯрд┐рдкреНрд╕</h3>
                <ul style="color: #333; margin: 0; padding-left: 20px; line-height: 1.8;">
                  <li>рд╡рд┐рддреНрддреАрдп рд╕реБрдЭрд╛рд╡реЛрдВ рдкрд░ рдЕрдкрдбреЗрдЯ рд░рд╣рдиреЗ рдХреЗ рд▓рд┐рдП рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рд╕рдХреНрд╖рдо рдХрд░реЗрдВ</li>
                  <li>рдирд┐рдпрдорд┐рдд рд░реВрдк рд╕реЗ рдлреНрд░реЙрдб рдЕрд▓рд░реНрдЯ рд╕реЗрдХреНрд╢рди рджреЗрдЦреЗрдВ</li>
                  <li>рддреНрд╡рд░рд┐рдд рд╡рд┐рддреНрддреАрдп рдкреНрд░рд╢реНрдиреЛрдВ рдХреЗ рд▓рд┐рдП рд╣рдорд╛рд░реЗ рд╡реЙрдпрд╕ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ</li>
                  <li>рд╡реНрдпрдХреНрддрд┐рдЧрдд рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдХреЗ рд▓рд┐рдП рд╣рдорд╛рд░реЗ рд╡рд┐рддреНрддреАрдп рдЪрд┐рдХрд┐рддреНрд╕рдХ рд╕реЗ рдЬреБрдбрд╝реЗрдВ</li>
                </ul>
              </div>
              
              <div style="text-align: center; margin: 30px 0;">
                <div style="background-color: #2E8B57; color: white; padding: 15px 30px; border-radius: 25px; display: inline-block; font-weight: bold; font-size: 16px;">
                  ЁЯОп рдЖрдЬ рд╣реА рдЕрдкрдиреА рд╡рд┐рддреНрддреАрдп рдпрд╛рддреНрд░рд╛ рд╢реБрд░реВ рдХрд░реЗрдВ!
                </div>
              </div>
              
              <p style="font-size: 14px; color: #666; line-height: 1.6; margin-top: 30px; border-top: 1px solid #eee; padding-top: 20px;">
                рдпрджрд┐ рдЖрдкрдХреЗ рдХреЛрдИ рдкреНрд░рд╢реНрди рд╣реИрдВ рдпрд╛ рд╕рд╣рд╛рдпрддрд╛ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИ, рддреЛ рдХреГрдкрдпрд╛ рд╣рдорд╛рд░реА рд╕рд╣рд╛рдпрддрд╛ рдЯреАрдо рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░рдиреЗ рдореЗрдВ рд╕рдВрдХреЛрдЪ рди рдХрд░реЗрдВред рд╣рдо рдЖрдкрдХреЗ рд╡рд┐рддреНрддреАрдп рд▓рдХреНрд╖реНрдпреЛрдВ рдХреЛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдореЗрдВ рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реИрдВ!
              </p>
              
              <p style="font-size: 16px; color: #333; margin-top: 25px;">
                рд╕рд╛рджрд░,<br>
                <strong style="color: #2E8B57;">ArthRakshak рдЯреАрдо</strong><br>
                <em style="color: #666; font-size: 14px;">рд╡рд┐рддреНрддреАрдп рдХрд▓реНрдпрд╛рдг рдореЗрдВ рдЖрдкрдХрд╛ рд╕рд╛рдЭреАрджрд╛рд░</em>
              </p>
            </div>
            
            <div style="text-align: center; margin-top: 20px; color: #999; font-size: 12px;">
              <p>рдпрд╣ рдИрдореЗрд▓ ${email} рдкрд░ рднреЗрдЬрд╛ рдЧрдпрд╛ рдерд╛ред рдпрджрд┐ рдЖрдкрдиреЗ рдЦрд╛рддрд╛ рдирд╣реАрдВ рдмрдирд╛рдпрд╛ рд╣реИ, рддреЛ рдХреГрдкрдпрд╛ рдЗрд╕ рдИрдореЗрд▓ рдХреЛ рдЕрдирджреЗрдЦрд╛ рдХрд░реЗрдВред</p>
            </div>
          </div>
        `
      }
    };

    const template = templates[language] || templates.en;
    
    if (!emailServiceReady) {
      // Development mode - just log the email
      console.log(`\n=== DEVELOPMENT MODE - WELCOME EMAIL ===`);
      console.log(`Welcome email for ${name} (${email})`);
      console.log(`Subject: ${template.subject}`);
      console.log(`Note: Brevo not configured. Welcome email logged to console.`);
      console.log(`=======================================\n`);
      
      return { success: true, messageId: 'dev-mode', note: 'Brevo not configured. Welcome email logged to console.' };
    }

    // Use Brevo to send email
    const sendSmtpEmail = {
      to: [{ email }],
      sender: { email: process.env.SENDER_EMAIL, name: 'ArthRakshak' },
      subject: template.subject,
      htmlContent: template.htmlContent
    };
    const result = await brevoApiInstance.sendTransacEmail(sendSmtpEmail);
    console.log('Welcome email sent successfully via Brevo:', result.messageId);
    return { success: true, messageId: result.messageId };

  } catch (error) {
    console.error('Error sending welcome email:', error);
    
    // For development/testing, just log and continue
    console.log(`\n=== DEVELOPMENT MODE - WELCOME EMAIL FAILED ===`);
    console.log(`Welcome email for ${name} (${email}) failed to send`);
    console.log(`Error: ${error.message}`);
    console.log(`=======================================\n`);
    
    // Return success so the registration flow continues
    return { success: true, messageId: 'dev-mode', note: 'Welcome email failed but registration completed' };
  }
};

// Send OTP and store in database
const sendOTP = async (email, language = 'en') => {
  try {
    const otp = generateOTP();
    
    // Store OTP in database first (this should always work)
    const stored = await storeOTP(email, otp);
    if (!stored) {
      return { success: false, message: 'Failed to store OTP in database' };
    }
    
    // Try to send email (this might fail in development)
    const emailResult = await sendOTPEmail(email, otp, language);
    
    // Always return success if OTP is stored, regardless of email status
    if (emailResult.messageId === 'dev-mode') {
      return {
        success: true,
        message: 'OTP generated successfully. Check console for OTP (Development Mode)',
        messageId: emailResult.messageId,
        developmentMode: true,
        otp: otp // Include OTP in development mode
      };
    }
    
    return {
      success: true,
      message: emailResult.success ? 'OTP sent successfully to your email' : 'OTP generated (check console)',
      messageId: emailResult.messageId || 'dev-mode'
    };
  } catch (error) {
    console.error('Error in sendOTP:', error);
    return { success: false, message: 'Failed to generate OTP' };
  }
};

// Clean expired OTPs (should be called periodically)
const cleanExpiredOTPs = async () => {
  try {
    await db.query('DELETE FROM otp_verifications WHERE expires_at < NOW()');
    console.log('Expired OTPs cleaned successfully');
  } catch (error) {
    console.error('Error cleaning expired OTPs:', error);
  }
};

module.exports = {
  sendOTP,
  verifyOTP,
  cleanExpiredOTPs,
  generateOTP,
  sendWelcomeEmail
};
